from email.message import EmailMessage
import ssl
import smtplib
from typing import List, Tuple, Optional, Any

from app.config import settings


def _smtp_conn():
	host = settings.smtp_server or settings.smtp_host
	port = settings.smtp_port
	return smtplib.SMTP_SSL(host, port, context=ssl.create_default_context())


def send_email_with_links(recipient_email: str, links: List[Any], request_id: Optional[str] = None) -> None:
	# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ –ø—É–±–ª–∏—á–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
	from app.utils.s3_utils import parse_s3_url, get_file_url_with_expiry

	def _to_public_url(item: Any) -> Optional[str]:
		# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
		if isinstance(item, dict):
			if item.get("public_video_url"):
				return item["public_video_url"]
			url = item.get("result_s3_url") or item.get("video_url") or item.get("image_url") or item.get("input_s3_url")
			if isinstance(url, str):
				try:
					if url.startswith("s3://"):
						b, k = parse_s3_url(url)
						pub, _ = get_file_url_with_expiry(b, k)
						return pub
					return url
				except Exception:
					return None
			return None
		# –°—Ç—Ä–æ–∫–∞: –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –ø—É–±–ª–∏—á–Ω—ã–º URL –∏–ª–∏ s3://
		if isinstance(item, str):
			try:
				if item.startswith("s3://"):
					b, k = parse_s3_url(item)
					pub, _ = get_file_url_with_expiry(b, k)
					return pub
				return item
			except Exception:
				return None
		return None

	public_links: List[str] = []
	for it in links:
		pu = _to_public_url(it)
		if pu:
			public_links.append(pu)

	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å request_id
	cta_url: Optional[str] = None
	base = settings.frontend_return_url_base or ""
	if base and request_id:
		cta_url = f"{base}/result.html?request_id={request_id}"
	elif base:
		cta_url = f"{base}/result.html"
	elif public_links:
		cta_url = public_links[0]

	# –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (fallback –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ HTML)
	text_body_lines = [
		"üéâ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–∂–∏–ª–æ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç üé¨",
		"",
		"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üíõ",
		"",
		"–ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–æ–æ–±—â–∞–µ–º ‚Äî –≤–∞—à–µ —Ñ–æ—Ç–æ –æ–∂–∏–ª–æ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–æ—Å—å –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤–∏–¥–µ–æ!",
		"–ú–∞–≥–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ—à–ª–æ–µ —á—É—Ç—å –±–ª–∏–∂–µ ‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —É–≤–∏–¥–µ—Ç—å",
		"—É–ª—ã–±–∫–∏, –≤–∑–≥–ª—è–¥—ã –∏ –º–æ–º–µ–Ω—Ç—ã, –¥–æ—Ä–æ–≥–∏–µ –≤–∞—à–µ–º—É —Å–µ—Ä–¥—Ü—É.",
		"",
		"üëâ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å –æ–∂–∏–≤—à–µ–µ –≤–∏–¥–µ–æ:",
	]
	if cta_url:
		text_body_lines.append(cta_url)
	text_body_lines.extend([
		"",
		"–ü—É—Å—Ç—å —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –Ω–µ–º–Ω–æ–≥–æ –Ω–æ—Å—Ç–∞–ª—å–≥–∏–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è üåø",
		"",
		"–° –ª—é–±–æ–≤—å—é,",
		"–ö–æ–º–∞–Ω–¥–∞ –û–∂–∏–≤–∏–§–æ—Ç–æ.online",
	])
	if public_links:
		text_body_lines.append("")
		text_body_lines.append("–°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ:")
		text_body_lines.extend(public_links)
	text_body = "\n".join(text_body_lines)

	# HTML-–≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
	html_cta = (
		f'<a href="{cta_url}" target="_blank" rel="noopener" '
		f'style="display:inline-block; background:#2563eb; color:#ffffff; text-decoration:none; '
		f'padding:14px 22px; border-radius:10px; font-weight:600;">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>'
		if cta_url else ""
	)
	html_body = f"""
	<div style="background:#f8fafc; padding:24px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, 'Apple Color Emoji', 'Segoe UI Emoji', sans-serif; color:#0f172a;">
		<table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"max-width:640px; margin:0 auto; background:#ffffff; border-radius:16px; overflow:hidden; box-shadow:0 4px 16px rgba(2, 6, 23, 0.08);\">
			<tr>
				<td style=\"padding:28px 28px 8px 28px; text-align:center;\">
					<div style=\"font-size:22px; font-weight:700;\">üéâ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–∂–∏–ª–æ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç üé¨</div>
				</td>
			</tr>
			<tr>
				<td style=\"padding:8px 28px 0 28px; font-size:16px; line-height:1.6;\">
					<p style=\"margin:0 0 12px 0;\">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üíõ</p>
					<p style=\"margin:0 0 12px 0;\">–ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–æ–æ–±—â–∞–µ–º ‚Äî –≤–∞—à–µ —Ñ–æ—Ç–æ –æ–∂–∏–ª–æ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–æ—Å—å –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤–∏–¥–µ–æ! –ú–∞–≥–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ—à–ª–æ–µ —á—É—Ç—å –±–ª–∏–∂–µ ‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —É–≤–∏–¥–µ—Ç—å —É–ª—ã–±–∫–∏, –≤–∑–≥–ª—è–¥—ã –∏ –º–æ–º–µ–Ω—Ç—ã, –¥–æ—Ä–æ–≥–∏–µ –≤–∞—à–µ–º—É —Å–µ—Ä–¥—Ü—É.</p>
					<p style=\"margin:0 0 16px 0;\">üëâ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å –æ–∂–∏–≤—à–µ–µ –≤–∏–¥–µ–æ:</p>
					<div style=\"text-align:center; margin:18px 0 6px 0;\">{html_cta}</div>
					<p style=\"margin:18px 0 6px 0;\">–ü—É—Å—Ç—å —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –Ω–µ–º–Ω–æ–≥–æ –Ω–æ—Å—Ç–∞–ª—å–≥–∏–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è üåø</p>
					<p style=\"margin:0 0 24px 0;\">–° –ª—é–±–æ–≤—å—é,<br/>–ö–æ–º–∞–Ω–¥–∞ –û–∂–∏–≤–∏–§–æ—Ç–æ.online</p>
				</td>
			</tr>
		</table>
		<div style=\"max-width:640px; margin:12px auto 0 auto; text-align:center; color:#64748b; font-size:12px;\">
			¬© {settings.frontend_return_url_base or '–û–∂–∏–≤–∏–§–æ—Ç–æ.online'}
		</div>
	</div>
	"""

	msg = EmailMessage()
	msg["Subject"] = "üéâ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–∂–∏–ª–æ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç üé¨"
	msg["From"] = settings.smtp_email or settings.smtp_username
	msg["To"] = recipient_email
	msg.set_content(text_body)
	msg.add_alternative(html_body, subtype="html")
	with _smtp_conn() as smtp:
		user = settings.smtp_email or settings.smtp_username
		if user and settings.smtp_password:
			smtp.login(user, settings.smtp_password)
		smtp.send_message(msg)


def send_payment_receipt(recipient_email: str, amount_rub: float, order_id: str, payment_id: str) -> None:
	msg = EmailMessage()
	msg["Subject"] = "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞"
	msg["From"] = settings.smtp_email or settings.smtp_username
	msg["To"] = recipient_email
	body = (
		f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n\n"
		f"–°—É–º–º–∞: {amount_rub:.2f} RUB\n"
		f"–ó–∞–∫–∞–∑: {order_id}\n"
		f"–ü–ª–∞—Ç–µ–∂: {payment_id}\n"
	)
	msg.set_content(body)
	with _smtp_conn() as smtp:
		user = settings.smtp_email or settings.smtp_username
		if user and settings.smtp_password:
			smtp.login(user, settings.smtp_password)
		smtp.send_message(msg)


def send_email_with_attachments(
	recipient_email: str,
	subject: str,
	body_text: str,
	attachments: List[Tuple[str, bytes, Optional[str]]],  # (filename, content, content_type)
) -> None:
	msg = EmailMessage()
	msg["Subject"] = subject
	msg["From"] = settings.smtp_email or settings.smtp_username
	msg["To"] = recipient_email
	msg.set_content(body_text)
	for filename, content, content_type in attachments:
		maintype, subtype = (content_type or "application/octet-stream").split("/", 1)
		msg.add_attachment(content, maintype=maintype, subtype=subtype, filename=filename)
	with _smtp_conn() as smtp:
		user = settings.smtp_email or settings.smtp_username
		if user and settings.smtp_password:
			smtp.login(user, settings.smtp_password)
		smtp.send_message(msg)
